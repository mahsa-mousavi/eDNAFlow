manifest {
    author = 'Mahsa Mousavi-Derazmahalleh'
    name = 'eDNAFlow' 
    homePage = 'http://github.com/mahsa-mousavi/eDNAFlow'
    description = 'Pipeline identifies Zotus using USEARCH unoise3'
    mainScript = 'eDNAFlow.nf'
    version = '1.0.0'
}


resume = true


trace {
  fields = 'name,hash,status,exit,realtime,submit,%cpu,%mem'
}


/*
 * Define the pipeline parameters
 * Each of these parameters can be specified at command line (e.g. --barcode 'x.txt'); if none specified the below will be set as default 
 */

params {
  reads   = "*_{R1,R2}.fastq"
  barcode = "*_bc.txt"
  minQuality = "20"
  minAlignLeng = "12"
  minLen = "50"
  primer_mismatch = "2"
  minsize = "8"
  maxTarSeq = "10"
  perc_identity = "95"
  evalue = "1e-3"
  qcov = "100"
  mode = "usearch32"  
  usearch64 = ""   
  vsearch = ""
  blast_db = ""
  custom_db = ""
  blast_task = "blastn"
  publish_dir_mode = "symlink" 
  bindDir = ""
  singularityDir = ""

  zotuTable = ""
  blastFile = ""
  fastaFile = ""
  metadataFile = ""
  lca_qcov = "100"
  lca_pid = "97"
  lca_diff = "1"
  lca_output = "lca_taxAssigned_results"
  optimise_tree = false

  lca_script = "scripts/LCA_taxonomyAssignment_scripts/runAssign_collapsedTaxonomy.py"
  lulu = "scripts/lulu.R"
  phyloseq_script = "scripts/create_phyloseq_object.R"
  dada2_script = "scripts/DADA2.R"
  cutadapt_script = "scripts/demux_cutadapt.sh"

  minMatch_lulu="84"

  test = false
  help = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}


// Load base.config by default for all pipelines
// move default values for singularity and process there and then enable
includeConfig 'conf/base.config'


// Load test parameters if required
if (params.test) {
  includeConfig 'conf/initialTest.config'
}


// Load profiles from conf/profiles.config
profiles {
  includeConfig 'conf/profiles.config'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}